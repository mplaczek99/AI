mplaczek@thelio:~/Documents/Classes/AI/Assignments/Assignment 2$ python3 systematic_backtracking.py  
Backtracking Solution:  ['a8', 'e7', 'h6', 'f5', 'c4', 'g3', 'b2', 'd1']                             
Placement Attempts:  876

mplaczek@thelio:~/Documents/Classes/AI/Assignments/Assignment 2$ python3 heuristic_random_placement.py  
Random Placement Solution:  ['d8', 'f7', 'h6', 'b5', 'g4', 'a3', 'c2', 'e1']
Placement Attempts:  95979

Performance Comparison:
	Systematic Backtracking:
		- The systematic backtracking algorithm is a depth-first search that systematically explores all possible configurations to find a solution. It is deterministic, meaning it will always take the same steps to find a solution for a given problem size.
		- The performance of backtracking is generally predictable and efficient for problems like the 8-queens puzzle, where the search space is not excessively large.
		- The count of placement attempts in this algorithm directly reflects the number of configurations explored before finding the solution.
	
	Heuristic Random Placement:
		- The random placement algorithm relies on heuristic methods and randomization to find a solution. It randomly generates board configurations and iteratively reduces conflicts.
		- Due to its stochastic nature, the performance can vary significantly between runs. In some cases, it may quickly find a solution, while in others, it may take a substantial number of attempts.
		- The count of placement attempts in this algorithm can be much higher due to its reliance on randomness and the potential for generating many non-optimal configurations before finding a solution.

Algorithm Characteristics:
	Deterministic vs. Stochastic:
		- Systematic backtracking is deterministic, providing consistent performance metrics across different runs for the same input size.
		- Heuristic random placement is stochastic, resulting in variable performance. This variability means that while it can be slower on average, it has the potential to find solutions quickly in some cases.
	
	Efficiency and Scalability:
		- For the 8-queens puzzle, systematic backtracking is generally efficient due to the relatively small search space.
		- Heuristic random placement may not scale well to larger problem sizes or more complex constraints due to its reliance on randomization and conflict resolution.

Implications:
	Consistency:
		- Systematic backtracking provides consistent and reliable results, making it preferable for applications requiring guaranteed performance and solutions.
	
	Potential for Optimization:
		- Heuristic random placement has the potential to be optimized with better heuristics and conflict resolution strategies. Techniques like simulated annealing or genetic algorithms can be incorporated to improve its efficiency.
	
	Use Cases:
		- Systematic backtracking is well-suited for problems with well-defined constraints and moderate search spaces.
		- Heuristic random placement may be useful in scenarios where quick, approximate solutions are acceptable, and there is room for iterative improvement.
